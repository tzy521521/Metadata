DatabaseConfig   数据库查询配置类。
     可以制定要查询的数据库的名称、匹配的shema、匹配的数据表、
  应该加一个 表的类型 type~~~~~

-------------------hasProcess() 该查询配置的查询处理过程是否在进行？？？？？？？

SimpleDataSource-------配置数据源

IntrospectedTable
功能：
    0.是否有主键
    1.获得表中所有的字段。      getAllColumns


DatabaseIntrospector 和 DBMetadataUtils
功能：

    0.获得DatabaseIntrospector    getIntrospector()

    1.获得数据库的列表。          getCatalogs()
    2.获得数据中的模式 名称列表   getSchemas()
    4.数据库中所用的表类型       getTableTypes()
    5.获取此数据库用作类别和表名之间的分隔符的 String。  getCatalogSeparator()---------有什么意义？

    3.根据数据库查询配置，获得数据库中表的和表中字段的信息。introspectTables(DatabaseConfig config)


DBMetadataUtils
 构造函数DBMetadataUtils(SimpleDataSource dataSource, boolean forceBigDecimals, boolean useCamelCase) 中forceBigDecimals，和useCamelCase 的作用？？？？？

    4.提供了一个默认的数据库查询配置，getDefaultConfig()---
                 -对于mysql的5.7使用安全配置的url的话 会有一点小问题。
    5.排序表                         sortTables(List<IntrospectedTable> tables)
    6.排序字段                       sortColumns(List<IntrospectedColumn> columns)
    7.测试数据库是否链接-
    8.转换SQL标识符大小形式。        convertLetterByCase()------------mysql中用不到？
    9.得到一个数据库元数据类。       getDatabaseMetaData()---------------------------关于数据库的一些详细信息可以从这里获取。
    10.获得而一个数据库链接          getConnection()
    11.获得链接的数据库的名称。。这个根据在建立数据源就知道了。  getDialect()



IntrospectedColumn  表字段信息
    可以增加更加详细字段信息。

TABLE_CAT String => 表类别（可为 null）
TABLE_SCHEM String => 表模式（可为 null）
TABLE_NAME String => 表名称

COLUMN_NAME String => 列名称                                                                       0  Name-----------------字段名
DATA_TYPE int => 来自 java.sql.Types 的 SQL 类型                                                   0  JdbcType-------------数据类型
TYPE_NAME String => 数据源依赖的类型名称，对于 UDT，该类型名称是完全限定的                         0  Type
COLUMN_SIZE int => 列的大小。                                                                      0  Length---------------数据长度
BUFFER_LENGTH 未被使用。
DECIMAL_DIGITS int => 小数部分的位数。对于 DECIMAL_DIGITS 不适用的数据类型，则返回 Null。          0  Scale
NUM_PREC_RADIX int => 基数（通常为 10 或 2）
NULLABLE int => 是否允许使用 NULL。                                                                0  Nullable-------------是否可空
columnNoNulls - 可能不允许使用 NULL 值
columnNullable - 明确允许使用 NULL 值
columnNullableUnknown - 不知道是否可使用 null
        REMARKS String => 描述列的注释（可为 null）                                                0  Remarks--------------字段描述
COLUMN_DEF String => 该列的默认值，当值在单引号内时应被解释为一个字符串（可为 null）               0  DefaultValue---------缺省值
SQL_DATA_TYPE int => 未使用
SQL_DATETIME_SUB int => 未使用
CHAR_OCTET_LENGTH int => 对于 char 类型，该长度是列中的最大字节数
ORDINAL_POSITION int => 表中的列的索引（从 1 开始）
IS_NULLABLE String => ISO 规则用于确定列是否包括 null。
YES --- 如果参数可以包括 NULL
NO --- 如果参数不可以包括 NULL
空字符串 --- 如果不知道参数是否可以包括 null
SCOPE_CATLOG String => 表的类别，它是引用属性的作用域（如果 DATA_TYPE 不是 REF，则为 null）
SCOPE_SCHEMA String => 表的模式，它是引用属性的作用域（如果 DATA_TYPE 不是 REF，则为 null）
SCOPE_TABLE String => 表名称，它是引用属性的作用域（如果 DATA_TYPE 不是 REF，则为 null）
SOURCE_DATA_TYPE short => 不同类型或用户生成 Ref 类型、来自 java.sql.Types 的 SQL 类型的源类型（如果 DATA_TYPE 不是 DISTINCT 或用户生成的 REF，则为 null）
IS_AUTOINCREMENT String => 指示此列是否自动增加
YES --- 如果该列自动增加
NO --- 如果该列不自动增加
空字符串 --- 如果不能确定该列是否是自动增加参数
COLUMN_SIZE 列表示给定列的指定列大小。对于数值数据，这是最大精度。对于字符数据，这是字符长度。对于日期时间数据类型，这是 String 表示形式的字符长度（假定允许的最大小数秒组件的精度）。对于二进制数据，这是字节长度。对于 ROWID 数据类型，这是字节长度。对于列大小不适用的数据类型，则返回 Null。

获得外键
ResultSet getImportedKeys(String catalog,
                          String schema,
                          String table)
                          throws SQLException
获取由给定表的外键列（表导入的主键）引用的主键列的描述。它们根据 PKTABLE_CAT、PKTABLE_SCHEM、PKTABLE_NAME 和 KEY_SEQ 进行排序。
每个主键列描述都有以下列：

PKTABLE_CAT String => 被导入的主键表类别（可为 null）
PKTABLE_SCHEM String => 被导入的主键表模式（可为 null）
PKTABLE_NAME String => 被导入的主键表名称
PKCOLUMN_NAME String => 被导入的主键列名称
FKTABLE_CAT String => 外键表类别（可为 null）
FKTABLE_SCHEM String => 外键表模式（可为 null）
FKTABLE_NAME String => 外键表名称
FKCOLUMN_NAME String => 外键列名称
KEY_SEQ short => 外键中的序列号（值 1 表示外键中的第一列，值 2 表示外键中的第二列）。
UPDATE_RULE short => 更新主键时外键发生的变化：
importedNoAction - 如果已经被导入，则不允许更新主键
importedKeyCascade - 将导入的键更改为与主键更新一致
importedKeySetNull - 如果已更新导入键的主键，则将导入键更改为 NULL
importedKeySetDefault - 如果已更新导入键的主键，则将导入键更改为默认值
importedKeyRestrict - 与 importedKeyNoAction 相同（为了与 ODBC 2.x 兼容）
DELETE_RULE short => 删除主键时外键发生的变化。
importedKeyNoAction - 如果已经导入，则不允许删除主键
importedKeyCascade - 删除导入删除键的行
importedKeySetNull - 如果已删除导入键的主键，则将导入键更改为 NULL
importedKeyRestrict - 与 importedKeyNoAction 相同（为了与 ODBC 2.x 兼容）
importedKeySetDefault - 如果已删除导入键的主键，则将导入键更改为默认值
FK_NAME String => 外键的名称（可为 null）
PK_NAME String => 主键的名称（可为 null）
DEFERRABILITY short => 是否可以将对外键约束的评估延迟到提交时间
importedKeyInitiallyDeferred - 有关定义，请参见 SQL92
importedKeyInitiallyImmediate - 有关定义，请参见 SQL92
importedKeyNotDeferrable - 有关定义，请参见 SQL92


获得索引信息

getIndexInfo
ResultSet getIndexInfo(String catalog,
                       String schema,
                       String table,
                       boolean unique,
                       boolean approximate)
                       throws SQLException获取给定表的索引和统计信息的描述。它们根据 NON_UNIQUE、TYPE、INDEX_NAME 和 ORDINAL_POSITION 进行排序。
每个索引列描述都有以下列：

TABLE_CAT String => 表类别（可为 null）
TABLE_SCHEM String => 表模式（可为 null）
TABLE_NAME String => 表名称
NON_UNIQUE boolean => 索引值是否可以不唯一。TYPE 为 tableIndexStatistic 时索引值为 false
INDEX_QUALIFIER String => 索引类别（可为 null）；TYPE 为 tableIndexStatistic 时索引类别为 null
INDEX_NAME String => 索引名称；TYPE 为 tableIndexStatistic 时索引名称为 null
TYPE short => 索引类型：
tableIndexStatistic - 此标识与表的索引描述一起返回的表统计信息
tableIndexClustered - 此为集群索引
tableIndexHashed - 此为散列索引
tableIndexOther - 此为某种其他样式的索引
ORDINAL_POSITION short => 索引中的列序列号；TYPE 为 tableIndexStatistic 时该序列号为零
COLUMN_NAME String => 列名称；TYPE 为 tableIndexStatistic 时列名称为 null
ASC_OR_DESC String => 列排序序列，"A" => 升序，"D" => 降序，如果排序序列不受支持，可能为 null；TYPE 为 tableIndexStatistic 时排序序列为 null
CARDINALITY int => TYPE 为 tableIndexStatistic 时，它是表中的行数；否则，它是索引中唯一值的数量。
PAGES int => TYPE 为 tableIndexStatisic 时，它是用于表的页数，否则它是用于当前索引的页数。
FILTER_CONDITION String => 过滤器条件，如果有的话。（可能为 null）

参数：
catalog - 类别名称；它必须与存储在数据库中的类别名称匹配；该参数为 "" 表示获取没有类别的那些描述；为 null 则表示该类别名称不应该用于缩小搜索范围
schema - 模式名称；它必须与存储在数据库中的模式名称匹配；该参数为 "" 表示获取没有模式的那些描述；为 null 则表示该模式名称不应该用于缩小搜索范围
table - 表名称；它必须与存储在数据库中的表名称匹配
unique - 该参数为 true 时，仅返回唯一值的索引；该参数为 false 时，返回所有索引，不管它们是否唯一
approximate - 该参数为 true 时，允许结果是接近的数据值或这些数据值以外的值；该参数为 false 时，要求结果是精确结果
返回：
ResultSet - 每一行都是一个索引列描述
抛出：
SQLException - 如果发生数据库访问错误


IntrospectedTable   表信息

                                          获得主键列表                                                              getPrimaryKeyColumns-----表主键
    可以增加更加详细字段信息。
TABLE_CAT String => 表类别（可为 null）     --表所在的数据库                                                        0   getCatalog()
TABLE_SCHEM String => 表模式（可为 null）                                                                           0   getSchema()
TABLE_NAME String => 表名称                                                                                         0   getName()

TABLE_TYPE String => 表类型。典型的类型是 "TABLE"、"VIEW"、"SYSTEM TABLE"、"GLOBAL TEMPORARY"、"LOCAL TEMPORARY"、"ALIAS" 和 "SYNONYM"。
REMARKS String => 表的解释性注释                                                                                    0   getRemarks()没实现。。用jdbc也获取不到波i啊  --表的描述

TYPE_CAT String => 类型的类别（可为 null）
TYPE_SCHEM String => 类型模式（可为 null）
TYPE_NAME String => 类型名称（可为 null）
SELF_REFERENCING_COL_NAME String => 有类型表的指定 "identifier" 列的名称（可为 null）
REF_GENERATION String => 指定在 SELF_REFERENCING_COL_NAME 中创建值的方式。这些值为 "SYSTEM"、"USER" 和 "DERIVED"。（可能为 null）


   getTableTypes()-----------获得数据库中支持的表的类型！！！
   getLocalDatabaseConfig(DatabaseConfig config)                        在这里修改查询制定类型的表。
   Map<IntrospectedTable, List<IntrospectedColumn>> getColumns  --------在这里修改查询制定类型的表，以及获取更加详细的表和字段的信息。